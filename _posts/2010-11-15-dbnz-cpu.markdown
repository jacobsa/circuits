---
layout: post
title: DBNZ CPU
---

I've decided to build a CPU that supports only one instruction: `DBNZ`. That
is, Decrement and Branch if Not Zero. Each instruction consists of two bytes.
The first gives a memory location whose value should be decremented, and the
second consists of the memory location from which to fetch the next instruction
if the result is non-zero.

Following the examples I saw in [Computer Organization and Design] [coad], I've
sketched out a data path for the CPU:

![DBNZ CPU data path](/circuits/images/dbnz_cpu_data_path.png)

Some relevant pieces (all registers, adders, and buses are 8 bits wide):

 *  `PC` is a register that contains the current byte of the instruction to be
    fetched. It can be fed from the +1 adder (for incrementing), or from `INS
    B` (for branches). The +1 adder is set up to raise a `Halt` signal that
    will halt the external clock circuitry when the CPU jumps to `0xFF`.

 *  There is an SRAM unit that can be told to store the supplied write data at
    the given address, or to read the data at the given address. The address is
    supplied by `PC` (for loading instructions) or `INS A` (for loading values
    to be decremented).

 *  `INS A` holds the first byte of the instruction, i.e. the address of the
    value to be decremented.

 *  `INS B` holds the second byte of the instruction, i.e. the address to jump
    to if the result of the decrement is not zero.

 *  `Val` holds the value to be decremented, and is set up to send its value
    from an adder that will do the decrementing. The adder is set up to raise
    a `ZeroRes` signal when the result of decrementing is zero; this feeds into
    the control circuitry.

[coad]: http://www.amazon.com/Computer-Organization-Design-Third-Architecture/dp/1558606041/ref=tmm_pap_title_1
